# Allow Thymeleaf templates to be reloaded at dev time
#spring.thymeleaf.cache=false

# ===============================
# = DATA SOURCE
# ===============================

# As described here: https://devcenter.heroku.com/articles/connecting-to-relational-databases-on-heroku-with-java
# 	The official Heroku buildpacks for Java and Gradle will attempt to create SPRING_DATASOURCE_URL, SPRING_DATASOURCE_USERNAME, and SPRING_DATASOURCE_PASSWORD environment variables when a dyno starts up. The values of the variables will be identical to the values in the corresponding JDBC variables.
# 	As long as your application has the proper JDBC driver defined as a dependency, these environment variables should allow your Spring Boot application to connect to the database without any other configuration.
# But setting it anyway just in case
spring.datasource.url=${JDBC_DATABASE_URL}
spring.datasource.username=${JDBC_DATABASE_USERNAME}
spring.datasource.password=${JDBC_DATABASE_PASSWORD}

# Up to v1.3 in Spring you could use spring.datasource.* =
# But from v1.4+ Spring defines specific namespaces for the four connections pools Spring Boot supports: tomcat, hikari, dbcp, dbcp2
# So you need to find our which pool your Spring uses and set correspondingly, e.g.: spring.datasource.tomcat.* =
#
# heroku's ClearDB only allow 10 connections on free
# spring.datasource.tomcat.max-active seems to be the same as spring.datasource.tomcat.maxActive
#
# for full attributes list see: https://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html#Common_Attributes
# Maximum number of active connections that can be allocated from this pool at the same time. Default value is 100
spring.datasource.tomcat.max-active=8
# The initial number of connections that are created when the pool is started. Default value is 10
spring.datasource.tomcat.initial-size=3
# Flag to remove abandoned connections if they exceed the removeAbandonedTimeout. If set to true a connection is considered abandoned and eligible for removal if it has been in use longer than the removeAbandonedTimeout Setting this to true can recover db connections from applications that fail to close a connection. 
spring.datasource.tomcat.remove-abandoned=true

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1


# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql=false

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# by sln
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
